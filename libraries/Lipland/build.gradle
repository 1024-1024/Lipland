/*
 * Copyright (C) 2005-2017 Qihoo 360 Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed To in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

import groovy.xml.QName

import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.library'

dependencies {
    provided fileTree(include: '*.jar', dir: 'libs')
    provided files('no-compile-libs/classes.jar')
    provided files('no-compile-libs/android-support-v4.jar')
}

def VERSION = "2.0.6"

android {

    compileSdkVersion  23

    buildToolsVersion = '25.0.0'


    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['assets']

        }


        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
        production.setRoot('build-types/production')

    }

    defaultConfig {
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "VERSION", "\"${VERSION}\""

    }

    buildTypes {

        debug {
            minifyEnabled false
       //     proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-project.txt'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-project.txt'
            zipAlignEnabled true
            shrinkResources true
        }

        production {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-project.txt'
            zipAlignEnabled true
            shrinkResources true
        }
    }

    buildToolsVersion '25.0.0'

    useLibrary 'org.apache.http.legacy'

}

def addProxyActivityForLaunchMode(application,cls,value){

    def newNode = application.appendNode(
            "activity"
    )
    def proxyActvityNode = null
    def nameAttr = null
    def attrs = newNode.attributes()

    application.activity.each{

        Iterator iter = it.attributes().keySet().iterator();
        while(iter.hasNext()){
            def name = iter.next()
            def prefix = name.getPrefix()
            def localPart = name.getLocalPart()
            if(prefix.equals("android") && localPart.equals("name")){
                if(it.attribute(name).endsWith(".ProxyActivity")){
                    proxyActvityNode = it
                    nameAttr = name
                    break
                }
            }
        }
    }

    if(proxyActvityNode != null) {
        attrs.putAll(proxyActvityNode.attributes())
        def launchModeAttr = new QName(nameAttr.getNamespaceURI(),"launchMode",nameAttr.getPrefix())
        attrs.put(launchModeAttr,value);
        attrs.put(nameAttr,cls);
    }

//    println "----newNode=" + newNode
}

task buildActivityStub(){

    def xmlPath = "${project.projectDir}/AndroidManifest.xml"
    def parser = new XmlParser()
    def manifest = parser.parse(xmlPath);
    def application = manifest.application[0]

    def srcPath = "${project.projectDir}/src/com/qihoo/plugin/core/ProxyActivity.java"

    File file = new File(srcPath)

    file.eachLine("UTF-8") {

        Pattern p = Pattern.compile(".*class\\s+(\\w*)\\s+");
        Matcher m = p.matcher(it);
        if(m.find()) {
            def className = m.group(1)
            def cls = "com.qihoo.plugin.core.ProxyActivity\$"+className
            println "Add activity: "+cls
            if(className.startsWith("SingleTop")){
                addProxyActivityForLaunchMode(application,cls,"singleTop")
            }else if(className.startsWith("SingleTask")){
                addProxyActivityForLaunchMode(application,cls,"singleTask")
            }else if(className.startsWith("SingleInstance")){
                addProxyActivityForLaunchMode(application,cls,"singleInstance")
            }
        }
    }


    android.sourceSets.all { source ->
//        println "+++++" + source.manifest.name
//        println "+++++" + source.manifest.srcFile
        if(source.manifest.name.startsWith("release ")||
                source.manifest.name.startsWith("debug ") ||
            source.manifest.name.startsWith("production ")
        ){
            def mergedManifestPath = source.manifest.srcFile
            if(mergedManifestPath != null){
                mergedManifestPath.getParentFile().mkdirs();
//                println "+++++mergedManifestPath=" + mergedManifestPath
                PrintWriter writer = new PrintWriter(mergedManifestPath, "UTF-8")
                def printer = new XmlNodePrinter(writer);
                printer.print(manifest);
                writer.close();
            }
        }


    }

}


preBuild.dependsOn buildActivityStub

android.libraryVariants.all { variant ->
    variant.outputs.each { output ->
        if (output.outputFile != null){
            println "buildType:${variant.buildType.name}"
            if("production".equalsIgnoreCase(variant.buildType.name) || "release".equalsIgnoreCase(variant.buildType.name)) {
                def apkFile = new File(output.outputFile.getParent(), "pluginloader_v${VERSION}.aar")
//                def apkFile = new File("${project.rootDir}/CommnonJars/libs", "pluginloader_sdk_v${VERSION}.aar")

                println "----" + apkFile.getAbsolutePath()
                output.outputFile = apkFile
            }else{
                def apkFile = new File(output.outputFile.getParent(), "pluginloader_v${VERSION}_${variant.buildType.name}.aar")
                println "----" + apkFile.getAbsolutePath()
                output.outputFile = apkFile
            }
        }
    }
}